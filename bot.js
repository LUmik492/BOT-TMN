const { Client, GatewayIntentBits, ActionRowBuilder, ButtonBuilder, ButtonStyle, ChannelType, PermissionsBitFieldconst, MessageActionRow, MessageButton, PermissionFlagsBits } = require('discord.js');


// Za≈Çaduj konfiguracjƒô z pliku config.json
const config = require('./config.json');  // ≈öcie≈ºka do pliku config.json
const { ADMIN_ROLE_ID } = require('./config.json');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
    ],
});

client.once('ready', () => {
    console.log(`Zalogowano jako ${client.user.tag}`);
});

client.on('messageCreate', async (message) => {
    if (message.content === '!verify') {
        const channelId = '1355484380608593984';  // Zmie≈Ñ 'YOUR_CHANNEL_ID' na ID kana≈Çu
        const channel = await client.channels.fetch(channelId);

        if (channel) {
            console.log('Kana≈Ç znaleziony:', channel.name);  // Wy≈õwietli nazwƒô kana≈Çu w konsoli
            const row = new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setCustomId('verify_button')
                    .setLabel('Kliknij, aby siƒô zweryfikowaƒá')
                    .setStyle(ButtonStyle.Primary)
            );

            try {
                await channel.send({
                    content: 'Kliknij przycisk, aby przej≈õƒá weryfikacjƒô:',
                    components: [row],
                });
            } catch (error) {
                console.error('B≈ÇƒÖd wysy≈Çania wiadomo≈õci na kana≈Ç:', error);
            }
        } else {
            console.log('Kana≈Ç o podanym ID nie zosta≈Ç znaleziony.');
        }
    }
});

client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;

    if (interaction.customId === 'verify_button') {
        const member = interaction.guild.members.cache.get(interaction.user.id);
        if (member) {
            const role = interaction.guild.roles.cache.get('1355484380281438292');  // Zmie≈Ñ ID_ROLI na odpowiednie

            if (role) {
                await member.roles.add(role);
                await interaction.reply({
                    content: 'Zosta≈Çe≈õ pomy≈õlnie zweryfikowany!',
                    ephemeral: true,
                });
            } else {
                console.log('Rola o podanym ID nie zosta≈Ça znaleziona!');
            }
        }
    }
});

// ID roli, kt√≥ra ma uprawnienia do komend administracyjnych

client.on('messageCreate', async (message) => {
    // Ignorowanie wiadomo≈õci od bota
    if (message.author.bot) return;

    // Komenda !clear
    if (message.content.startsWith('!clear')) {
        // Sprawdzenie, czy u≈ºytkownik ma rolƒô "Administrator"
        if (!message.member.roles.cache.has(ADMIN_ROLE_ID)) {
            return message.reply('Nie masz uprawnie≈Ñ do u≈ºywania tej komendy!');
        }

        // Usuwanie wiadomo≈õci
        const args = message.content.split(' ').slice(1);  // Pobieranie argument√≥w z komendy
        const amount = parseInt(args[0]);

        if (isNaN(amount) || amount < 1 || amount > 100) {
            return message.reply('Podaj liczbƒô wiadomo≈õci do usuniƒôcia (od 1 do 100).');
        }

        try {
            // Usuwanie wiadomo≈õci
            await message.channel.bulkDelete(amount);
            message.reply(`Pomy≈õlnie usuniƒôto ${amount} wiadomo≈õci.`);
        } catch (error) {
            console.error('B≈ÇƒÖd przy usuwaniu wiadomo≈õci:', error);
            message.reply('WystƒÖpi≈Ç b≈ÇƒÖd przy usuwaniu wiadomo≈õci.');
        }
    }

    // Komenda !kick
    if (message.content.startsWith('!kick')) {
        // Sprawdzenie, czy u≈ºytkownik ma rolƒô "Administrator"
        if (!message.member.roles.cache.has(ADMIN_ROLE_ID)) {
            return message.reply('Nie masz uprawnie≈Ñ do u≈ºywania tej komendy!');
        }

        // Kicking u≈ºytkownika z serwera
        const member = message.mentions.members.first();
        if (!member) return message.reply('Musisz oznaczyƒá u≈ºytkownika, kt√≥rego chcesz wyrzuciƒá.');

        try {
            await member.kick('Wyrzucony przez bota');
            message.reply(`${member.user.tag} zosta≈Ç wyrzucony z serwera.`);
        } catch (error) {
            console.error('B≈ÇƒÖd przy wyrzucaniu u≈ºytkownika:', error);
            message.reply('WystƒÖpi≈Ç b≈ÇƒÖd przy wyrzucaniu u≈ºytkownika.');
        }
    }

    // Komenda !ban
    if (message.content.startsWith('!ban')) {
        // Sprawdzenie, czy u≈ºytkownik ma rolƒô "Administrator"
        if (!message.member.roles.cache.has(ADMIN_ROLE_ID)) {
            return message.reply('Nie masz uprawnie≈Ñ do u≈ºywania tej komendy!');
        }

        // Banowanie u≈ºytkownika
        const member = message.mentions.members.first();
        if (!member) return message.reply('Musisz oznaczyƒá u≈ºytkownika, kt√≥rego chcesz zbanowaƒá.');

        try {
            await member.ban({ reason: 'Zbanowany przez bota' });
            message.reply(`${member.user.tag} zosta≈Ç zbanowany.`);
        } catch (error) {
            console.error('B≈ÇƒÖd przy banowaniu u≈ºytkownika:', error);
            message.reply('WystƒÖpi≈Ç b≈ÇƒÖd przy banowaniu u≈ºytkownika.');
        }
    }

    // Komenda !mute
    if (message.content.startsWith('!mute')) {
        // Sprawdzenie, czy u≈ºytkownik ma rolƒô "Administrator"
        if (!message.member.roles.cache.has(ADMIN_ROLE_ID)) {
            return message.reply('Nie masz uprawnie≈Ñ do u≈ºywania tej komendy!');
        }

        // Mute u≈ºytkownika na ca≈Çym serwerze
        const member = message.mentions.members.first();
        if (!member) return message.reply('Musisz oznaczyƒá u≈ºytkownika, kt√≥rego chcesz wyciszyƒá.');

        try {
            // Nadanie uprawnie≈Ñ do wyciszenia na ca≈Çym serwerze
            await member.timeout(60 * 60 * 1000);  // Wyciszenie na 1 godzinƒô (w milisekundach)
            message.reply(`${member.user.tag} zosta≈Ç wyciszony na 1 godzinƒô.`);
        } catch (error) {
            console.error('B≈ÇƒÖd przy wyciszaniu u≈ºytkownika:', error);
            message.reply('WystƒÖpi≈Ç b≈ÇƒÖd przy wyciszaniu u≈ºytkownika.');
        }
    }

    // Komenda !unmute
    if (message.content.startsWith('!unmute')) {
        // Sprawdzenie, czy u≈ºytkownik ma rolƒô "Administrator"
        if (!message.member.roles.cache.has(ADMIN_ROLE_ID)) {
            return message.reply('Nie masz uprawnie≈Ñ do u≈ºywania tej komendy!');
        }

        // Unmute u≈ºytkownika
        const member = message.mentions.members.first();
        if (!member) return message.reply('Musisz oznaczyƒá u≈ºytkownika, kt√≥rego chcesz odciszyƒá.');

        try {
            // Usuniƒôcie timeoutu (odciszenie)
            await member.timeout(null);  // Usuwamy wyciszenie
            message.reply(`${member.user.tag} zosta≈Ç odciszony.`);
        } catch (error) {
            console.error('B≈ÇƒÖd przy odciszaniu u≈ºytkownika:', error);
            message.reply('WystƒÖpi≈Ç b≈ÇƒÖd przy odciszaniu u≈ºytkownika.');
        }
    }
});
// KONFIGURACJA ‚Äì Podmie≈Ñ ID kategorii i r√≥l!
const CATEGORY_ID = "1357225632026595388"; // ID kategorii dla ticket√≥w
const REKRUTACJA_ROLE_ID = "1355484380294025267"; // ID roli do rekrutacji
const ZARZAD_ROLE_ID = "1355484380294025267"; // ID roli zarzƒÖdu
const HELP_ROLE_ID = "1355484380281438297"; // ID roli do pomocy og√≥lnej

// Obiekt przechowujƒÖcy otwarte tickety (u≈ºytkownik -> ID kana≈Çu)
const openTickets = new Map();

client.on('ready', () => {
    console.log(`‚úÖ Bot ${client.user.tag} jest online!`);
});

// Obs≈Çuga komendy do wys≈Çania panelu ticket√≥w
client.on('messageCreate', async (message) => {
    if (message.content === '!setup-tickets' && message.member.permissions.has(PermissionFlagsBits.Administrator)) {
        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId('ticket_rekrutacja')
                .setLabel('üìù Rekrutacja')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('ticket_pomoc')
                .setLabel('‚ùì Pomoc Og√≥lna')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('ticket_zarzad')
                .setLabel('üèõ Sprawa do ZarzƒÖdu')
                .setStyle(ButtonStyle.Danger)
        );

        await message.channel.send({
            content: 'üé´ **System Ticket√≥w** üé´\nKliknij przycisk poni≈ºej, aby utworzyƒá ticket!',
            components: [row]
        });
    }
});

// Obs≈Çuga przycisk√≥w tworzƒÖcych ticket
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;

    const { customId, guild, user } = interaction;

    // Sprawdzenie, czy u≈ºytkownik ma ju≈º otwarty ticket
    if (openTickets.has(user.id)) {
        return interaction.reply({
            content: '‚ùå Masz ju≈º otwarty ticket!',
            ephemeral: true
        });
    }

    // Okre≈õlenie nazwy kana≈Çu i przypisanie odpowiednich r√≥l
    let ticketName, allowedRole;
    if (customId === 'ticket_rekrutacja') {
        ticketName = `ticket-rekrutacja-${user.username}`;
        allowedRole = REKRUTACJA_ROLE_ID;
    } else if (customId === 'ticket_pomoc') {
        ticketName = `ticket-pomoc-${user.username}`;
        allowedRole = HELP_ROLE_ID;
    } else if (customId === 'ticket_zarzad') {
        ticketName = `ticket-zarzad-${user.username}`;
        allowedRole = ZARZAD_ROLE_ID;
    } else {
        return;
    }

    // Tworzenie kana≈Çu ticketowego
    const ticketChannel = await guild.channels.create({
        name: ticketName,
        type: ChannelType.GuildText,
        parent: CATEGORY_ID,
        permissionOverwrites: [
            {
                id: guild.id, // Wszyscy - brak dostƒôpu
                deny: [PermissionFlagsBits.ViewChannel]
            },
            {
                id: user.id, // Tw√≥rca ticketu - pe≈Çny dostƒôp
                allow: [
                    PermissionFlagsBits.ViewChannel,
                    PermissionFlagsBits.SendMessages,
                    PermissionFlagsBits.ReadMessageHistory
                ]
            },
            {
                id: allowedRole, // Odpowiednia rola - dostƒôp
                allow: [
                    PermissionFlagsBits.ViewChannel,
                    PermissionFlagsBits.SendMessages,
                    PermissionFlagsBits.ReadMessageHistory
                ]
            },
            {
                id: ADMIN_ROLE_ID, // Administratorzy - pe≈Çny dostƒôp
                allow: [
                    PermissionFlagsBits.ViewChannel,
                    PermissionFlagsBits.ManageChannels,
                    PermissionFlagsBits.SendMessages,
                    PermissionFlagsBits.ReadMessageHistory
                ]
            }
        ]
    });

    // Dodanie ticketu do listy otwartych ticket√≥w
    openTickets.set(user.id, ticketChannel.id);

    // Przycisk do zamkniƒôcia ticketu
    const closeButton = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId('close_ticket')
            .setLabel('‚ùå Zamknij Ticket')
            .setStyle(ButtonStyle.Danger)
    );

    // Wysy≈Çanie wiadomo≈õci w ticketowym kanale
    await ticketChannel.send({
        content: `üéü **Ticket dla ${user.username}**\nWitaj! Opisz sw√≥j problem, a odpowiednia osoba wkr√≥tce siƒô tobƒÖ zajmie.\n\nüîí Kliknij przycisk poni≈ºej, aby zamknƒÖƒá ticket.`,
        components: [closeButton]
    });

    await interaction.reply({
        content: `‚úÖ Ticket zosta≈Ç utworzony: ${ticketChannel}`,
        ephemeral: true
    });
});

// Obs≈Çuga zamykania ticketu
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;
    
    const { customId, channel, user } = interaction;

    if (customId === 'close_ticket') {
        // Sprawdzenie, czy u≈ºytkownik to tw√≥rca ticketu lub admin
        if (!openTickets.has(user.id) && !interaction.member.roles.cache.has(ADMIN_ROLE_ID)) {
            return interaction.reply({ content: '‚ùå Nie mo≈ºesz zamknƒÖƒá tego ticketu!', ephemeral: true });
        }

        await interaction.reply({
            content: 'üõë Ticket zostanie zamkniƒôty za 5 sekund...',
            ephemeral: true
        });

        setTimeout(async () => {
            await channel.delete();
            openTickets.delete(user.id);
        }, 5000);
    }
});
// Logowanie bota za pomocƒÖ tokenu z config.json
client.login(config.TOKEN).catch(console.error);
